#!/usr/bin/perl -w 
#===============================================================================
#
#         FILE:  speech_text_align_long_file.pl
#
#        USAGE:  ./speech_text_align_long_file.pl [-h] -c configuration_file -t transcription_file -i audio_file
#													   [-w working_dir] [-e experiment_id]
#
#  DESCRIPTION: Long Speech-Text alignment utility
#      OPTIONS:  -h							                      help
#				 -i   audio_file				                  The audio file that will be aligned with the text
#				 -c   configuration_file	  	                  Configuration for the alignment process 
#				 -t   transcription_file		                  Transcription file
#				 -w   working_dir				                  Working directory
#				 -e   experiment_id			                      An id for the experiment which is run
#				 --tf [txt_no_times|speaker_per_line_no_times]    Transcription format [txt_no_times]
# REQUIREMENTS:  Packages: 
#				 SailTools
#				 Log4perl
#         BUGS:  ---
#        NOTES:  ---
#       AUTHOR:  Nassos Katsamanis (NK), <http://sipi.usc.edu/~nkatsam>
#      COMPANY:  SAIL, University of Southern California
#      VERSION:  1.2
#      CREATED:  02/12/2010 02:05:29 PM EEST
#     REVISION:  ---
#===============================================================================

# General directives;
use strict;

# Required packages
use File::Basename;
use File::Path;
use File::Spec::Functions;
use SailTools;
use SailTools::SailSignal;
use SailTools::SailTranscription;
use SailTools::AlignSpeech;
use Getopt::Long;
use Log::Log4perl qw(get_logger :levels);

my $conf = qq(
	log4perl.category = DEBUG, ScreenApp
	log4perl.appender.ScreenApp = Log::Log4perl::Appender::Screen
	log4perl.appender.ScreenApp.layout   = Log::Log4perl::Layout::PatternLayout
	log4perl.appender.ScreenApp.Threshold = ERROR
	log4perl.appender.ScreenApp.layout.ConversionPattern = [%p] (%F line %L) %m%n
	);

Log::Log4perl::init( \$conf);

my $root_logger = Log::Log4perl->get_logger();
use vars qw( %cfg
            $ROOTPATH
            $WORKINGDIR
            $BINDIR
            $EXPERIMENT_ID
            );

my $audio_file = 'speech.wav';
my $text_file = 'transcription.txt';
my $log_file = 'alignment.log';
my $help = 0;
my $trans_format = 'txt_no_times';
my $configuration_file = 'alignment.cfg';
my $working_dir = 'alignment';
my $experiment_id = 'alignment';
GetOptions( 'h' => \$help,
			't=s' => \$text_file,
			'i=s' => \$audio_file,
			'c=s' => \$configuration_file,
			'w=s' => \$working_dir,
			'e=s' => \$experiment_id,
            'tf=s'=> \$trans_format,
		) or usage();			
if ($help) {usage();}

# Check if input files really exist
if ((!-e $text_file) || (!-e $audio_file) || (!-e $configuration_file))  { 
	$root_logger->debug("Configuration file: $configuration_file");
	$root_logger->debug("Audio file: $audio_file");
	$root_logger->debug("Transcription file: $text_file");
	$root_logger->fatal("Did not find audio file, configuration file or transcription");
	usage(); 
}

# Preparations
$WORKINGDIR = $working_dir;
mkpath($WORKINGDIR); 
if (!-e $WORKINGDIR) {
	$root_logger->fatal("Cannot create working directory $working_dir.");
	usage();
}
$EXPERIMENT_ID = $experiment_id;

# Initialize file logging
$log_file = catfile($working_dir, $log_file);
my $appender = Log::Log4perl::Appender->new(
				"Log::Log4perl::Appender::File",
				filename => "$log_file",
				mode => 'append',
				additivity => 0);
$root_logger->add_appender($appender);
$root_logger->debug("File appender has been added.");
my $saillogger = get_logger("SailTools");
$saillogger->level($root_logger->level());
$saillogger->add_appender($appender);


# Find audio file's base name
my ($audio_bname, $audio_path, $audio_sfx) = fileparse($audio_file, '\.[^\.]+');
$root_logger->debug("audio:$audio_file text: $text_file");
my $name = $audio_bname;

# Load configuration file and initialize the experiment
do('./' . $configuration_file);
my $experiment = new SailTools(\%cfg);
$root_logger->debug("Initialized experiment $EXPERIMENT_ID, working dir: ".$cfg{working_dir});

# Load audio signal
my $signal = new SailTools::SailSignal($audio_file, $experiment);
$root_logger->debug("Successfully initialized a SailSignal instance");

# Initialize the aligned transcription
my $transcription_file = catfile($cfg{working_dir}, "$name.lab");
my %raw_transcription = ();
$raw_transcription{name} = $text_file;
$raw_transcription{format} = $trans_format;
my $text = new SailTools::SailTranscription($transcription_file, $experiment);
$text->set_from_file(\%raw_transcription);
$text->correct_typos_from_file($experiment->{cfg}->{text}->{word_corrections_map}); 
$text->delete_words_from_file($experiment->{cfg}->{text}->{word_deletions_list});


$root_logger->debug("Initialized transcription");

# Initialize and Perform Alignment
my $aligner = new SailTools::AlignSpeech($experiment);
$root_logger->debug("Properly initialized alignment");

my $aligned_transcription = $aligner->align_speech_text($signal, $text);

exit;

sub usage {
	print qq{	
#        USAGE:  ./speech_text_align_long_file.pl [-h] -c configuration_file -t transcription_file -i audio_file
#													   [-w working_dir] [-e experiment_id]
#
#  DESCRIPTION: Long Speech-Text alignment utility
#      OPTIONS:  -h							                      help
#				 -i   audio_file				                  The audio file that will be aligned with the text
#				 -c   configuration_file	  	                  Configuration for the alignment process 
#				 -t   transcription_file		                  Transcription file
#				 -w   working_dir				                  Working directory
#				 -e   experiment_id			                      An id for the experiment which is run
#				 --tf [txt_no_times|speaker_per_line_no_times]    Transcription format [txt_no_times]

	example: $0 -i utterance.wav -t utterance_transcription.lab -c config_file.pl
};	
	exit;
}

